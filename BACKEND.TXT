⚡️ PROMPT COMPLETO: “BACKEND — Control de Inventario de Tienda de Videojuegos”

⚙️ Objetivo:
Crear el backend completo para una aplicación de control de inventario de videojuegos y consolas, cumpliendo todas las especificaciones técnicas exigidas en el taller.

🧱 1. Estructura general del proyecto

Genera un backend en Node.js + Express con conexión a MongoDB, que tenga la siguiente estructura de carpetas:

📁 backend/
│
├── 📁 config/
│   └── db.js                   # Conexión a MongoDB con mongoose
│
├── 📁 models/
│   └── Producto.js             # Esquema del producto
│   └── Venta.js                # Esquema de la venta
│
├── 📁 controllers/
│   └── productoController.js   # Controlador CRUD de productos
│   └── ventaController.js      # Controlador de ventas (incluye validación de stock)
│
├── 📁 routes/
│   └── productoRoutes.js
│   └── ventaRoutes.js
│
├── 📁 middlewares/
│   └── errorHandler.js         # Manejo centralizado de errores
│
├── .env                        # Variables de entorno
├── server.js                   # Punto de entrada principal
├── package.json
└── README.md                   # Documentación del backend

🚀 2. Requisitos técnicos obligatorios

Framework: Node.js con Express.

Base de datos: MongoDB usando mongoose.

Variables de entorno: mediante dotenv (para URL de la base y puerto).

Validaciones: usando express-validator.

CORS: configurado para permitir conexión con el frontend.

Manejo de errores: con middlewares personalizados.

Estructura modular: rutas, controladores, modelos y configuración separados.

Respuestas HTTP adecuadas: códigos 200, 400, 404, 500 según el caso.

Mensajes claros: en formato JSON.

🎮 3. Reglas funcionales del sistema
🔸 Módulo Productos

Cada producto debe tener los campos:

nombre (string, requerido)

tipo (string, valores posibles: “juego” o “consola”)

precio (number, mayor que 0)

cantidad (number, entero mayor o igual a 0)

Endpoints requeridos:

GET /api/productos → listar todos

GET /api/productos/:id → obtener uno

POST /api/productos → registrar nuevo (validar campos)

PUT /api/productos/:id → editar datos

DELETE /api/productos/:id → eliminar producto

🔸 Módulo Ventas

Cada venta debe guardar:

producto (referencia al producto vendido)

cantidadVendida

fecha (automática)

Al registrar una venta (POST /api/ventas):

Validar que el producto exista.

Validar que haya stock suficiente.

Si hay stock → descontar automáticamente.

Si no hay → devolver error 400 con mensaje "Stock insuficiente".

🧩 4. Dependencias necesarias

Instala las siguientes dependencias:

npm install express mongoose cors dotenv express-validator


Dependencias opcionales para desarrollo:

npm install nodemon --save-dev

🧰 5. Archivo .env obligatorio

Debe incluir:

PORT=3000
MONGO_URI=mongodb+srv://<usuario>:<password>@<cluster>/<nombreDB>

🧩 6. Configuración de CORS

En server.js, debes incluir:

import cors from "cors";
app.use(cors({
  origin: "http://localhost:5500", // frontend autorizado
  methods: ["GET", "POST", "PUT", "DELETE"]
}));

⚙️ 7. Validaciones con express-validator

Ejemplo para productos:

import { check } from "express-validator";

const validarProducto = [
  check("nombre").notEmpty().withMessage("El nombre es obligatorio"),
  check("tipo").isIn(["juego", "consola"]).withMessage("El tipo debe ser 'juego' o 'consola'"),
  check("precio").isFloat({ gt: 0 }).withMessage("El precio debe ser mayor que 0"),
  check("cantidad").isInt({ min: 0 }).withMessage("La cantidad debe ser un número entero positivo"),
];

🧾 8. Respuestas esperadas (JSON)

Ejemplo de respuesta correcta:

{
  "message": "Producto creado correctamente",
  "producto": {
    "_id": "67890...",
    "nombre": "PS5",
    "tipo": "consola",
    "precio": 3200000,
    "cantidad": 10
  }
}


Ejemplo de error:

{
  "error": "Stock insuficiente"
}

🧠 9. Middleware de errores

Debe capturar cualquier error y responder con código y mensaje:

export const errorHandler = (err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: "Error interno del servidor" });
};

📘 10. Documentación en README.md

Debe incluir:

Descripción del proyecto.

Requisitos previos.

Pasos de instalación.

Ejemplo del archivo .env.

Lista de endpoints con ejemplos de uso.

Cómo iniciar el servidor (npm start o nodemon server.js).

💡 11. Condiciones adicionales

El código debe estar comentado para explicar las partes principales.

El proyecto debe poder probarse fácilmente con Postman.

Al iniciarse el servidor, debe mostrar un mensaje en consola confirmando la conexión a MongoDB.

Se debe manejar la conexión y reconexión a la base de datos con manejo de errores.

🧩 Prompt Final

🧠 PROMPT FINAL (cópialo así):

Crea el backend completo para el proyecto Control de Inventario de Tienda de Videojuegos usando Node.js, Express y MongoDB, cumpliendo los siguientes puntos:

Usa estructura modular profesional con carpetas /config, /models, /controllers, /routes, /middlewares.

Implementa CORS, dotenv, express-validator, y mongoose correctamente.

Incluye validaciones, manejo de errores, y mensajes JSON claros.

Los módulos son: Productos y Ventas, con validaciones de stock, CRUD completo y persistencia en MongoDB.

Usa respuestas HTTP adecuadas, comentarios explicativos, y conexión robusta a MongoDB.

Genera un README.md documentado explicando instalación, configuración, endpoints y pruebas con Postman.

✅ Cumple con todas las reglas del taller original:

Uso de variables de entorno.

Modularización.

Validaciones.

CORS.

Buenas prácticas.

Persistencia de datos.

Código limpio y documentado.